export interface TOkResult<T, E> {
    _type: 'Ok';
    value: T;
    unwrap: () => T;
    isOk: () => this is TOkResult<T, E>;
    isErr: () => this is TErrResult<T, E>;
}
export interface TErrResult<T, E> {
    _type: 'Err';
    error: E;
    unwrap: () => T;
    isOk: () => this is TOkResult<T, E>;
    isErr: () => this is TErrResult<T, E>;
}
export type TResult<T, E> = TOkResult<T, E> | TErrResult<T, E>;
export declare function Ok<T, E>(value: T): TOkResult<T, E>;
export declare function Err<T, E>(error: E): TErrResult<T, E>;
export declare function unwrapOk<T, E>(result: TResult<T, E>): T;
export declare function unwrapErr<T, E>(result: TResult<T, E>): E;
export declare function mapOk<T, E, U>(result: TResult<T, E>, mapFn: (value: T) => U): TResult<U, E>;
export declare function mapErr<T, E, F>(result: TResult<T, E>, mapFn: (error: E) => F): TResult<T, F>;
export declare function unwrapOrNull<T, E>(result: TResult<T, E>): T | null;
export declare function unwrapOr<T, E>(result: TResult<T, E>, defaultValue: T): T;
export declare function fromServerResult<T, E>(result: TServerResult<T, E>): TResult<T, E>;
export declare function toServerResult<T, E>(result: TResult<T, E>): TServerResult<T, E>;
export type TServerResult<T, E> = {
    _type: 'Ok';
    value: T;
} | {
    _type: 'Err';
    error: E;
};
