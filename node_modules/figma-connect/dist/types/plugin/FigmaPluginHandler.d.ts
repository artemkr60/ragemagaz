import type { TFromAppMessageEvent, TFromPluginMessageEvent, TPluginCallbackRegistration } from '../types';
export declare class FigmaPluginHandler<GFromAppMessageEvent extends TFromAppMessageEvent = TFromAppMessageEvent, GFromPluginMessageEvent extends TFromPluginMessageEvent = TFromPluginMessageEvent> {
    readonly figma: typeof figma;
    constructor(figmaInstance: typeof figma, options?: TFigmaPluginHandlerOptions<GFromAppMessageEvent>);
    register(registrations: TPluginCallbackRegistration<GFromAppMessageEvent> | TPluginCallbackRegistration<GFromAppMessageEvent>[]): (() => void)[];
    post<GKey extends GFromPluginMessageEvent['key']>(key: GKey, args: Extract<GFromPluginMessageEvent, {
        key: GKey;
    }>['args']): void;
    private registerCallbacks;
    private registerCallback;
    private onEvent;
}
export interface TFigmaPluginHandlerOptions<GAppMessageEvent extends TFromAppMessageEvent> {
    events?: TPluginCallbackRegistration<GAppMessageEvent>[];
}
