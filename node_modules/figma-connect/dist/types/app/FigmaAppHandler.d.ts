import type { TAppCallbackRegistration, TFromAppMessageEvent, TFromPluginMessageEvent } from '../types';
export declare class FigmaAppHandler<GFromPluginMessageEvent extends TFromPluginMessageEvent = TFromPluginMessageEvent, GFromAppMessageEvent extends TFromAppMessageEvent = TFromAppMessageEvent> {
    private readonly parent;
    constructor(parentInstance: Window, options?: TFigmaAppHandlerOptions<GFromPluginMessageEvent>);
    register(registrations: TAppCallbackRegistration<GFromPluginMessageEvent> | TAppCallbackRegistration<GFromPluginMessageEvent>[]): (() => void)[];
    post<GKey extends GFromAppMessageEvent['key']>(key: GKey, args: Extract<GFromAppMessageEvent, {
        key: GKey;
    }>['args']): void;
    private registerCallbacks;
    private registerCallback;
    private onEvent;
}
export interface TFigmaAppHandlerOptions<GPluginMessageEvent extends TFromPluginMessageEvent> {
    events?: TAppCallbackRegistration<GPluginMessageEvent>[];
}
