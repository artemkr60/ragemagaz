import{PluginCallback as g}from"./PluginCallback.js";var u=Object.defineProperty,h=(l,e,r)=>e in l?u(l,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):l[e]=r,p=(l,e,r)=>h(l,e+"",r),v=(l,e,r)=>new Promise((t,s)=>{var o=a=>{try{i(r.next(a))}catch(n){s(n)}},c=a=>{try{i(r.throw(a))}catch(n){s(n)}},i=a=>a.done?t(a.value):Promise.resolve(a.value).then(o,c);i((r=r.apply(l,e)).next())});class m{constructor(e,r={}){p(this,"figma");const{events:t=[]}=r;this.figma=e,this.register(t)}register(e){const r=Array.isArray(e)?e.map(t=>new g(t)):[new g(e)];return this.registerCallbacks(r)}post(e,r){this.figma.ui.postMessage({key:e,args:r})}registerCallbacks(e){return e.map(r=>this.registerCallback(r))}registerCallback(e){let r=e.type,t=null;const s=r.split(".");s.length===2&&(t=s[0],r=s[1]);const o=t==="app"?this.figma.ui:this.figma,c=e.once?"once":"on",i=(...a)=>{this.onEvent(e,a).catch(n=>{console.error("An error occurred while handling plugin callback",n)})};return o[c](r,i),()=>{o.off(r,i)}}onEvent(e,r){return v(this,null,function*(){if(e.type==="app.message"){const t=r[0];(t==null?void 0:t.key)===e.key&&typeof(t==null?void 0:t.args)=="object"&&(yield e.callback(this,t.args))}else yield e.callback(this,...r)})}}export{m as FigmaPluginHandler};
